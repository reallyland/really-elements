name: ci

on:
  push:
    branches:
      - '*'
    tags-ignore:
      - '*'
  pull_request:
    branches:
      - '*'
    tags-ignore:
      - '*'

defaults:
  run:
    shell: bash

env:
  CI_SKIP: false
  COVERAGE: false
  GITHUB_COMMIT_MESSAGE: ''
  IS_UBUNTU: false
  NODE_VERSION: v0.0.0
  NPM_CACHE_DIR: ~/.npm
  NPM_VERSION: 0.0.0

jobs:
  test:
    if: "!contains(github.event.head_commit.message, '[ci skip]') && !contains(github.event.head_commit.message, '[skip ci]') && !contains(github.event.head_commit.message, 'doc:')"
    env:
      GITHUB_COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
    name: ${{ matrix.os }} ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 120
    strategy:
      matrix:
        os: [ubuntu-latest]
        target: [16.x]

    steps:
      - name: CI skip check
        run: |
          if [[ -n "$(echo $GITHUB_COMMIT_MESSAGE | grep -iE '^[0-9]+[.]{1,}[0-9]+[.]{1,}[0-9]+')" ]]; then
            echo "[INFO] SKIP CI"
            echo "CI_SKIP=true" >> $GITHUB_ENV
          fi

      - name: Checkout
        if: env.CI_SKIP == 'false'
        uses: actions/checkout@v2

      # - name: Setup node@${{ matrix.target }}
      #   if: env.CI_SKIP == 'false'
      #   uses: actions/setup-node@v2
      #   with:
      #     node-version: ${{ matrix.target }}

      # - name: Install latest npm
      #   if: env.CI_SKIP == 'false'
      #   run: |
      #     npm i -g npm@latest

      - name: List versions
        if: env.CI_SKIP == 'false'
        run: |
          echo "IS_UBUNTU=${{ contains(matrix.os, 'ubuntu') }}" >> $GITHUB_ENV
          echo "NODE_VERSION=$(node -v)" >> $GITHUB_ENV
          echo "NPM_CACHE_DIR=$(npm config get cache)" >> $GITHUB_ENV
          echo "NPM_VERSION=$(npm -v)" >> $GITHUB_ENV

          pwd
          ls -la
          which npm
          npm x -y -- envinfo

      - name: Cache dependencies
        if: env.CI_SKIP == 'false'
        id: npm-cache
        uses: actions/cache@v2
        with:
          # See this glob workaround at https://github.com/actions/toolkit/issues/713.
          path: |
            ${{ env.NPM_CACHE_DIR }}/*
            !${{ env.NPM_CACHE_DIR }}/_npx
          key: ${{ matrix.os }}-node-${{ env.NODE_VERSION }}-npm-${{ env.NPM_VERSION }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ matrix.os }}-node-${{ env.NODE_VERSION }}-npm-${{ env.NPM_VERSION }}

      - name: Install dependencies
        if: env.CI_SKIP == 'false'
        run: |
          sh ./list-npx-cache.sh
          npm ci
          sh ./list-npx-cache.sh

      - name: Setup Playwright
        if: env.CI_SKIP == 'false'
        run: |
          ./node_modules/.bin/playwright install-deps

      - name: Lint
        if: env.CI_SKIP == 'false'
        run: |
          npm run lint:build

      - name: Test
        if: env.CI_SKIP == 'false' && env.IS_UBUNTU == 'false'
        run: |
          npm run wtr

      - name: Test with coverage
        if: env.CI_SKIP == 'false' && env.IS_UBUNTU != 'false'
        run: |
          npm run wtr
        env:
          COVERAGE: true

      - name: Upload coverage to codecov
        if: env.CI_SKIP == 'false' && env.IS_UBUNTU != 'false' && success()
        uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage/lcov.info
          flags: unit_tests
